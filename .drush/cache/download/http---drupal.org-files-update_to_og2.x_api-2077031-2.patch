diff --git a/og_create_perms.module b/og_create_perms.module
old mode 100644
new mode 100755
index 3ceb45f..12e249c
--- a/og_create_perms.module
+++ b/og_create_perms.module
@@ -1,116 +1,93 @@
 <?php
-/**
- * Implements hook_node_access
- * We add our special node access hook to allow access to the create form for node types. 
- * We can only allow access if the gid is provided on the url
- */
-function og_create_perms_node_access($node, $op, $account) {
-  $result = NODE_ACCESS_IGNORE;
-  $gids = array_values(og_get_context_by_url()); 
-  $type = is_string($node) ? $node : $node->type;
-  if ($op == 'create' && in_array($type, og_create_perms_list_bundles())) {
-    foreach (og_get_context_by_url() as $gid) {
-      // loop through any of the provided gids, and only allow access if we can post to all of them
-      $access = true; 
-      if (!og_user_access($gid, 'create ' . $type . ' content', $account)) {
-        $access = false;
-      }
-      if ($access) $result = NODE_ACCESS_ALLOW;
-    }
-  }
-  return $result;
-}
 
 /**
  * Implements hook_field_attach_validate
  * Adds a validation hook to prevent users from posting to groups they are not members of.
- *  
+ *
  * TODO: test
  * TODO: admin config to turn on or off
  * TODO: some of this should be in field_attach_form_validate
- * 
+ *
  * @param $entity_type
  * @param $entity
  * @param $errors
- * 
+ *
  */
 function og_create_perms_field_attach_validate($entity_type, $entity, &$errors) {
   // we only work on nodes for now
   $types = og_create_perms_list_bundles();
   if ($entity_type == 'node' && in_array($entity->type, $types)){
-    $field_name = OG_AUDIENCE_FIELD; 
-    if (!property_exists($entity, $field_name)) {
-      // Sometimes, when a node is being saved, the group_audience property does not seem to exist
-      // This may be as a result of field permissions
-      // since we are not really bothered with any entity content apart from the group, 
-      // we can safely replace it with old content (because, if the group is not here, it will not change)   
-      // reload the entity if we have to
-      $entity = og_load_entity($entity_type, $entity);
-    } 
-    $account = user_load($entity->uid);
-    
-    // Language may always be NONE, but I am being cautious here
-    $language_code = field_language($entity_type, $entity, $field_name); 
-    
+    global $user;
+    $account = clone $user;
+
+    $field_name = OG_AUDIENCE_FIELD;
+
+    // Language may always be UND, but I am being cautious here
+    $language_code = field_language($entity_type, $entity, $field_name);
+
     if (!$items = $entity->{$field_name}[$language_code]) {
-      // if we don't have any items, initialise an array with a null entry 
-      $items = array( 0 => array( 'gid' => null ));
+      // if we don't have any items, initialise an array with a null entry
+      $items = array(0 => array('target_id' => NULL));
     }
-      // Make sure we are a member of all attached groups 
+
+      // Make sure we are a member of all attached groups
     foreach ($items as $delta => $group) {
-      if (is_null($group['gid'])) {
-        // null gid = global context
-        if (! user_access('create ' . $entity->type . ' content', $account)) {
-          $errors[$field_name][$language_code][$delta][] = array(  
-            'error' => 'og_create_perms:No global create permissions', 
-            'message' => t('You are not permitted to create %type content outside a group', 
+      if (empty($group['target_id'])) {
+        if (!user_access('create ' . $entity->type . ' content', $account) && !user_access('administer nodes')) {
+          $errors[$field_name][$language_code][$delta][] = array(
+            'error' => 'og_create_perms:No global create permissions',
+            'message' => t('You are not permitted to create %type content outside a group',
                 array('%type' => $entity->type))
           );
         }
       }
-      else if (og_is_member($group['gid'], 'user', $account)) {
-          // have we got permission to create within this group
-          // og_node_access does not support a create permission, so we use og_user_access
-          if (!og_user_access($group['gid'], 'create '. $entity->type .' content', $account)) {
-            $group_entity = og_load_entity_from_group($group['gid']);
+      else {
+        $group_info = og_create_perms_load_og_info($group['target_id']);
+        if (og_is_member($group_info['group_type'], $group_info['gid'], 'user', $account) || user_access('administer nodes')) {
+          if (!og_user_access($group_info['group_type'], $group_info['gid'], 'create '. $entity->type .' content', $account) && !user_access('administer nodes')) {
             $errors[$field_name][$language_code][$delta][] = array(
-              'error' => 'og_create_perms:content type restriction', 
-              'message' => t('You are not permitted to create %type content in %group', 
-                array('%type' => $entity->type, '%group' => $group_entity->title)) //TODO: best way to get title ?  
+              'error' => 'og_create_perms:content type restriction',
+              'message' => t('You are not permitted to create %type content in %group',
+                array('%type' => $entity->type, '%group' => $group_info['title']))
             );
           }
-      } 
-      else {
-        // we have a gid, but for a group the user does not belong to
-        $errors[$field_name][$language_code][0][] = array(
-          'error' => 'og_create_perms:user not a member', 
-          'message' => t('Attempt to post to an illegal group')
-        );
+        }
+        else {
+          // we have a gid, but for a group the user does not belong to
+          $errors[$field_name][$language_code][0][] = array(
+            'error' => 'og_create_perms:user not a member',
+            'message' => t("You are not permitted to post content in a group you're not a member of.")
+          );
+        }
       }
     }
-  } 
+  }
   // no return value, errors is a reference
 }
 
-
- 
 /**
- * Implements hook_og_permission().
+ * Helper function to load information for a given group.
+ * @todo We hard code this to get node groups. It is not flexible, but there's currently no other way.
+ *
+ * @param  $gid
+ *
+ * @return array
  */
-function og_create_perms_og_permission() {
-  // get a list of content types that can be added to a group
-  $bundles = og_create_perms_list_bundles();
-  $perms = array();
-  // Generate standard node permissions for all applicable node types.
-  foreach ($bundles as $bundle) {
-     $perms += og_create_perms_list_permissions($bundle);
-  }
-  return $perms;
+function og_create_perms_load_og_info($gid) {
+  $query = db_select('og_membership', 'm');
+  $query->leftJoin('node', 'n', 'n.nid = m.gid');
+  $query->leftJoin('node_revision', 'v', 'v.vid = n.vid');
+
+  return $query->fields('m', array('group_type', 'gid'))
+            ->fields('v', array('title'))
+            ->condition('m.gid', $gid)
+            ->condition('m.group_type', 'node')
+            ->execute()
+            ->fetchAssoc();
 }
 
 /**
  * Helper function to return a list of types that can be added to a group
- * 
  */
 function og_create_perms_list_bundles() {
   $bundles = array();
@@ -120,27 +97,3 @@ function og_create_perms_list_bundles() {
   }
   return $bundles;
 }
-
-
-/**
- * Helper function to generate standard node permission list for a given type.
- *
- * @param $type
- *   The machine-readable name of the node type.
- * @return array
- *   An array of permission names and descriptions.
- */
-function og_create_perms_list_permissions($type) {
-  $info = node_type_get_type($type);
-  $type = check_plain($info->type);
-
-  // Build standard list of node permissions for this type.
-  $perms = array(
-    "create $type content" => array(
-      'title' => t('%type_name: Create new content', array('%type_name' => $info->name)),
-    ),
-  );
-
-  return $perms;
-}
-
